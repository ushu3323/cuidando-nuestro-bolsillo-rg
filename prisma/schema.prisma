// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Category {
    id      String    @id @default(dbgenerated("gen_random_uuid()"))
    name    String    @unique
    product Product[]
}

model Product {
    id         String   @id @default(dbgenerated("gen_random_uuid()"))
    name       String   @unique
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])
    posts      Post[]
    Offer      Offer[]  @ignore
}

model Post {
    id         String   @id @default(dbgenerated("gen_random_uuid()"))
    image      String
    productId  String
    product    Product  @relation(fields: [productId], references: [id])
    commerceId String
    commerce   Commerce @relation(fields: [commerceId], references: [id], onDelete: Restrict)
    price      Decimal  @db.Decimal(20, 2)
    authorId   String
    author     User     @relation(fields: [authorId], references: [id], onDelete: Restrict)

    publishDate DateTime @default(now())
}

model Commerce {
    id           String  @id @default(dbgenerated("gen_random_uuid()"))
    name         String
    address      String
    observations String?
    posts        Post[]
    Offer        Offer[] @ignore
}

enum Role {
    ADMIN
    USER
}

// Neccessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(USER)
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Offer {
    id          String   @id @default(dbgenerated("gen_random_uuid()"))
    productId   String
    commerceId  String
    price       Decimal  @db.Decimal(20, 2)
    publishDate DateTime @default(now())
    authorUID   String
    Commerce    Commerce @relation(fields: [commerceId], references: [id])
    Product     Product  @relation(fields: [productId], references: [id])

    @@ignore
}
